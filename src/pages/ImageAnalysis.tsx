import { useState, useRef } from 'react'
import { EyeIcon, CloudArrowUpIcon, XMarkIcon, SparklesIcon } from '@heroicons/react/24/outline'

interface AnalysisResult {
  category: string
  confidence: number
  description: string
}

interface UploadedImage {
  id: string
  file: File
  url: string
  name: string
  size: number
}

const ImageAnalysis = () => {
  const [images, setImages] = useState<UploadedImage[]>([])
  const [selectedModel, setSelectedModel] = useState('gpt-4-vision')
  const [analysisType, setAnalysisType] = useState('general')
  const [customPrompt, setCustomPrompt] = useState('')
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([])
  const [isDragOver, setIsDragOver] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const models = [
    { id: 'gpt-4-vision', name: 'GPT-4 Vision', description: 'OpenAI\'s multimodal model' },
    { id: 'claude-3-opus', name: 'Claude 3 Opus', description: 'Anthropic\'s vision model' },
    { id: 'gemini-pro-vision', name: 'Gemini Pro Vision', description: 'Google\'s multimodal AI' },
    { id: 'llava', name: 'LLaVA', description: 'Open-source vision-language model' },
    { id: 'blip-2', name: 'BLIP-2', description: 'Salesforce\'s vision-language model' },
    { id: 'flamingo', name: 'Flamingo', description: 'DeepMind\'s few-shot learning model' }
  ]

  const analysisTypes = [
    { value: 'general', label: 'General Description', description: 'Comprehensive image analysis' },
    { value: 'objects', label: 'Object Detection', description: 'Identify and locate objects' },
    { value: 'scene', label: 'Scene Understanding', description: 'Analyze the overall scene' },
    { value: 'text', label: 'Text Extraction (OCR)', description: 'Extract text from images' },
    { value: 'emotions', label: 'Emotion Analysis', description: 'Analyze facial expressions' },
    { value: 'medical', label: 'Medical Analysis', description: 'Medical image interpretation' },
    { value: 'custom', label: 'Custom Analysis', description: 'Use your own prompt' }
  ]

  const handleFileUpload = (files: FileList | null) => {
    if (!files) return

    Array.from(files).forEach(file => {
      if (file.type.startsWith('image/')) {
        const url = URL.createObjectURL(file)
        const newImage: UploadedImage = {
          id: Date.now().toString(),
          file,
          url,
          name: file.name,
          size: file.size
        }
        setImages(prev => [...prev, newImage])
      }
    })
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(true)
  }

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
    handleFileUpload(e.dataTransfer.files)
  }

  const removeImage = (id: string) => {
    setImages(prev => {
      const imageToRemove = prev.find(img => img.id === id)
      if (imageToRemove) {
        URL.revokeObjectURL(imageToRemove.url)
      }
      return prev.filter(img => img.id !== id)
    })
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const handleAnalyze = async () => {
    if (images.length === 0) return
    
    setIsAnalyzing(true)
    
    // Simulate API call
    setTimeout(() => {
      const mockResults: AnalysisResult[] = [
        {
          category: 'Main Subject',
          confidence: 0.95,
          description: 'The image contains a detailed analysis result that would be generated by the selected AI model.'
        },
        {
          category: 'Scene Context',
          confidence: 0.87,
          description: 'The background and environmental context would be analyzed here.'
        },
        {
          category: 'Objects Detected',
          confidence: 0.92,
          description: 'Various objects in the image would be identified and listed here.'
        }
      ]
      
      setAnalysisResults(mockResults)
      setIsAnalyzing(false)
    }, 3000)
  }

  const getAnalysisPrompt = () => {
    switch (analysisType) {
      case 'general':
        return 'Provide a comprehensive description of this image'
      case 'objects':
        return 'Identify and describe all objects in this image'
      case 'scene':
        return 'Analyze the scene, setting, and overall context'
      case 'text':
        return 'Extract and transcribe all text visible in this image'
      case 'emotions':
        return 'Analyze facial expressions and emotions'
      case 'medical':
        return 'Provide medical analysis of this image'
      case 'custom':
        return customPrompt
      default:
        return 'Analyze this image'
    }
  }

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          Image Analysis
        </h1>
        <p className="text-gray-600">
          Analyze and understand images using advanced computer vision models
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Controls Panel */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Analysis Settings</h2>
            
            {/* Model Selection */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                AI Model
              </label>
              <select
                value={selectedModel}
                onChange={(e) => setSelectedModel(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {models.map((model) => (
                  <option key={model.id} value={model.id}>
                    {model.name}
                  </option>
                ))}
              </select>
              <p className="text-sm text-gray-500 mt-1">
                {models.find(m => m.id === selectedModel)?.description}
              </p>
            </div>

            {/* Analysis Type */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Analysis Type
              </label>
              <select
                value={analysisType}
                onChange={(e) => setAnalysisType(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {analysisTypes.map((type) => (
                  <option key={type.value} value={type.value}>
                    {type.label}
                  </option>
                ))}
              </select>
              <p className="text-sm text-gray-500 mt-1">
                {analysisTypes.find(t => t.value === analysisType)?.description}
              </p>
            </div>

            {/* Custom Prompt */}
            {analysisType === 'custom' && (
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Custom Prompt
                </label>
                <textarea
                  value={customPrompt}
                  onChange={(e) => setCustomPrompt(e.target.value)}
                  placeholder="Enter your custom analysis prompt..."
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                />
              </div>
            )}

            {/* Image Upload */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Upload Images
              </label>
              <div
                className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors ${
                  isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
                }`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                onClick={() => fileInputRef.current?.click()}
              >
                <CloudArrowUpIcon className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-600">
                  Drop images here or click to upload
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  PNG, JPG, GIF, WebP supported
                </p>
              </div>

              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => handleFileUpload(e.target.files)}
                className="hidden"
              />
            </div>

            {/* Analyze Button */}
            <button
              onClick={handleAnalyze}
              disabled={images.length === 0 || isAnalyzing}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white font-medium py-3 px-4 rounded-md transition-colors flex items-center justify-center"
            >
              {isAnalyzing ? (
                <>
                  <SparklesIcon className="h-5 w-5 mr-2 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <EyeIcon className="h-5 w-5 mr-2" />
                  Analyze Images
                </>
              )}
            </button>
          </div>
        </div>

        {/* Main Content Area */}
        <div className="lg:col-span-2 space-y-6">
          {/* Uploaded Images */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              Uploaded Images ({images.length})
            </h2>
            
            {images.length === 0 ? (
              <div className="text-center py-8">
                <EyeIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">No images uploaded yet</p>
                <p className="text-sm text-gray-500 mt-2">Upload images to start analysis</p>
              </div>
            ) : (
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {images.map((image) => (
                  <div key={image.id} className="relative group">
                    <img
                      src={image.url}
                      alt={image.name}
                      className="w-full h-32 object-cover rounded-lg border border-gray-200"
                    />
                    <button
                      onClick={() => removeImage(image.id)}
                      className="absolute top-2 right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <XMarkIcon className="h-4 w-4" />
                    </button>
                    <div className="mt-2">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {image.name}
                      </p>
                      <p className="text-xs text-gray-500">
                        {formatFileSize(image.size)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Analysis Results */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              Analysis Results
            </h2>
            
            {isAnalyzing ? (
              <div className="text-center py-8">
                <SparklesIcon className="h-12 w-12 text-blue-500 mx-auto mb-4 animate-pulse" />
                <p className="text-gray-600">Analyzing your images...</p>
                <p className="text-sm text-gray-500 mt-2">
                  Using {models.find(m => m.id === selectedModel)?.name} for {analysisTypes.find(t => t.value === analysisType)?.label.toLowerCase()}
                </p>
                <div className="mt-4 bg-gray-200 rounded-full h-2 w-64 mx-auto">
                  <div className="bg-blue-500 h-2 rounded-full animate-pulse" style={{ width: '70%' }}></div>
                </div>
              </div>
            ) : analysisResults.length > 0 ? (
              <div className="space-y-4">
                <div className="bg-gray-50 rounded-lg p-4 mb-4">
                  <p className="text-sm font-medium text-gray-700">Analysis Prompt:</p>
                  <p className="text-sm text-gray-600 mt-1">{getAnalysisPrompt()}</p>
                </div>
                
                {analysisResults.map((result, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium text-gray-900">{result.category}</h3>
                      <span className="text-sm bg-green-100 text-green-800 px-2 py-1 rounded">
                        {Math.round(result.confidence * 100)}% confidence
                      </span>
                    </div>
                    <p className="text-gray-600 text-sm leading-relaxed">
                      {result.description}
                    </p>
                  </div>
                ))}
                
                <div className="mt-6 pt-4 border-t border-gray-200">
                  <p className="text-sm text-gray-500">
                    Analysis completed using {models.find(m => m.id === selectedModel)?.name}
                  </p>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <EyeIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">No analysis results yet</p>
                <p className="text-sm text-gray-500 mt-2">
                  Upload images and click analyze to get started
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default ImageAnalysis 